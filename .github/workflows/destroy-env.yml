---
name: Destroy Environment

'on':
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - staging
          - production
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

env:
  TF_VERSION: 1.5.7

jobs:
  confirm-destroy:
    name: Confirm Destruction
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "ERROR: You must type 'DESTROY' to confirm environment \
              destruction"
            exit 1
          fi
          echo "Confirmation validated. Proceeding with environment \
            destruction."

  pre-destroy-backup:
    name: Pre-Destroy Backup
    runs-on: ubuntu-latest
    needs: confirm-destroy
    environment: ${{ github.event.inputs.environment }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: backup-${{ github.event.inputs.environment }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/environments/\
          ${{ github.event.inputs.environment }}

      - name: Get Current State
        run: |
          terraform show -json > current-state.json
          terraform output -json > outputs.json
        working-directory: terraform/environments/\
          ${{ github.event.inputs.environment }}

      - name: Backup RDS Database
        id: backup-rds
        run: |
          RDS_INSTANCE_ID=$(terraform output -raw rds_instance_id \
            2>/dev/null || echo "")
          if [ ! -z "$RDS_INSTANCE_ID" ]; then
            echo "Creating final snapshot for RDS instance: \
              $RDS_INSTANCE_ID"
            SNAPSHOT_ID="final-snapshot-$(date +%Y%m%d-%H%M%S)"
            aws rds create-db-snapshot \
              --db-instance-identifier "$RDS_INSTANCE_ID" \
              --db-snapshot-identifier "$SNAPSHOT_ID"

            echo "Waiting for snapshot to complete..."
            aws rds wait db-snapshot-completed \
              --db-snapshot-identifier "$SNAPSHOT_ID"
            echo "snapshot_id=$SNAPSHOT_ID" >> $GITHUB_OUTPUT
            echo "RDS snapshot created: $SNAPSHOT_ID"
          else
            echo "No RDS instance found to backup"
          fi
        working-directory: terraform/environments/\
          ${{ github.event.inputs.environment }}
        continue-on-error: true

      - name: Export Secrets Manager Secrets
        run: |
          echo "Backing up secrets (metadata only, not values)..."
          SECRET_ARNS=$(aws secretsmanager list-secrets \
            --query "SecretList[?contains(Name, \
              'solidity-security-${{ github.event.inputs.environment }}')]\
              .ARN" \
            --output text)

          if [ ! -z "$SECRET_ARNS" ]; then
            echo "$SECRET_ARNS" > secrets-list.txt
            echo "Secrets backed up to secrets-list.txt"
          else
            echo "No secrets found to backup"
          fi
        continue-on-error: true

      - name: Save Backup Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pre-destroy-backup-${{ github.event.inputs.environment }}-\
            ${{ github.sha }}
          path: |
            terraform/environments/\
              ${{ github.event.inputs.environment }}/current-state.json
            terraform/environments/\
              ${{ github.event.inputs.environment }}/outputs.json
            terraform/environments/\
              ${{ github.event.inputs.environment }}/secrets-list.txt
          retention-days: 90

      - name: Generate Backup Summary
        run: |
          echo "## Pre-Destroy Backup Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Backup Created:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \
            ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **RDS Snapshot**: \
            ${{ steps.backup-rds.outputs.snapshot_id || 'None created' }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform State**: Backed up to artifacts" \
            >> $GITHUB_STEP_SUMMARY
          echo "- **Secrets Metadata**: Backed up to artifacts" \
            >> $GITHUB_STEP_SUMMARY

  destroy-infrastructure:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: pre-destroy-backup
    environment: ${{ github.event.inputs.environment }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: destroy-${{ github.event.inputs.environment }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/environments/\
          ${{ github.event.inputs.environment }}

      - name: Terraform Plan Destroy
        id: plan-destroy
        run: |
          terraform plan -destroy -detailed-exitcode -no-color \
            -out=destroy-plan
          echo "exitcode=$?" >> $GITHUB_OUTPUT
        working-directory: terraform/environments/\
          ${{ github.event.inputs.environment }}

      - name: Review Destroy Plan
        if: steps.plan-destroy.outputs.exitcode == 2
        run: |
          echo "## Destroy Plan for \
            ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "### Resources to be destroyed:" >> $GITHUB_STEP_SUMMARY
          terraform show -no-color destroy-plan | head -50 \
            >> $GITHUB_STEP_SUMMARY
        working-directory: terraform/environments/\
          ${{ github.event.inputs.environment }}

      - name: Terraform Destroy
        if: steps.plan-destroy.outputs.exitcode == 2
        run: terraform apply -auto-approve destroy-plan
        working-directory: terraform/environments/\
          ${{ github.event.inputs.environment }}

      - name: Verify Destruction
        run: |
          echo "Verifying resources have been destroyed..."

          # Check if EKS cluster still exists
          CLUSTER_NAME="solidity-security-\
            ${{ github.event.inputs.environment }}"
          if aws eks describe-cluster --name "$CLUSTER_NAME" \
            >/dev/null 2>&1; then
            echo "WARNING: EKS cluster $CLUSTER_NAME still exists"
          else
            echo "âœ“ EKS cluster destroyed"
          fi

          # Check if RDS instance still exists (excluding snapshots)
          RDS_INSTANCES=$(aws rds describe-db-instances \
            --query "DBInstances[?contains(DBInstanceIdentifier, \
              'solidity-security-${{ github.event.inputs.environment }}')]\
              .DBInstanceIdentifier" \
            --output text)
          if [ ! -z "$RDS_INSTANCES" ]; then
            echo "WARNING: RDS instances still exist: $RDS_INSTANCES"
          else
            echo "âœ“ RDS instances destroyed"
          fi

          # Check ECR repositories
          ECR_REPOS=$(aws ecr describe-repositories \
            --query "repositories[?contains(repositoryName, \
              'solidity-security')].repositoryName" \
            --output text 2>/dev/null || echo "")
          if [ ! -z "$ECR_REPOS" ]; then
            echo "INFO: ECR repositories preserved: $ECR_REPOS"
          fi

          echo "Environment destruction verification completed"

      - name: Cleanup Terraform State
        run: |
          # Remove local state files
          rm -f terraform.tfstate*
          rm -f destroy-plan
        working-directory: terraform/environments/\
          ${{ github.event.inputs.environment }}

      - name: Generate Destruction Summary
        run: |
          echo "## Destruction Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Environment Destroyed:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \
            ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Destroyed At**: $(date)" \
            >> $GITHUB_STEP_SUMMARY
          echo "- **Initiated By**: ${{ github.actor }}" \
            >> $GITHUB_STEP_SUMMARY

          echo "### Preserved Resources:" >> $GITHUB_STEP_SUMMARY
          echo "- ECR repositories (for image history)" >> $GITHUB_STEP_SUMMARY
          echo "- RDS snapshots (for data recovery)" >> $GITHUB_STEP_SUMMARY
          echo "- CloudWatch logs (for audit trail)" >> $GITHUB_STEP_SUMMARY

          echo "### Manual Cleanup Required:" >> $GITHUB_STEP_SUMMARY
          echo "- Remove DNS records from Cloudflare" \
            >> $GITHUB_STEP_SUMMARY
          echo "- Clean up any manual AWS resources" >> $GITHUB_STEP_SUMMARY
          echo "- Review and delete old snapshots if needed" \
            >> $GITHUB_STEP_SUMMARY

  notify-destruction:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: destroy-infrastructure
    if: always()

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.destroy-infrastructure.result }}
          text: |
            ðŸš¨ ENVIRONMENT DESTROYED ðŸš¨
            Environment: ${{ github.event.inputs.environment }}
            Status: ${{ needs.destroy-infrastructure.result }}
            Initiated by: ${{ github.actor }}
            Timestamp: $(date)

            Please remove DNS records from Cloudflare and review any
            manual cleanup required.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create Issue for Manual Cleanup
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Manual cleanup required after destroying \
                ${{ github.event.inputs.environment }} environment`,
              body: `## Environment Destruction Cleanup

            The ${{ github.event.inputs.environment }} environment has \
              been destroyed.

            ### Manual cleanup tasks:

            - [ ] Remove DNS records from Cloudflare:
              - [ ] ${{ github.event.inputs.environment }}\
                .advancedblockchainsecurity.com
              - [ ] api.${{ github.event.inputs.environment }}\
                .advancedblockchainsecurity.com
              - [ ] app.${{ github.event.inputs.environment }}\
                .advancedblockchainsecurity.com

            - [ ] Review and clean up ECR images if needed
            - [ ] Review and delete old RDS snapshots if needed
            - [ ] Check for any manually created AWS resources
            - [ ] Update documentation to reflect environment removal

            **Destroyed by:** ${{ github.actor }}
            **Timestamp:** ${new Date().toISOString()}
            `,
              labels: ['cleanup', 'infrastructure', 'manual-task']
            });

            console.log('Created cleanup issue:', issue.data.html_url);
