apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-autoscaler
  labels:
    app.kubernetes.io/name: cluster-autoscaler
    app.kubernetes.io/component: autoscaler
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cluster-autoscaler
      app.kubernetes.io/component: autoscaler
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cluster-autoscaler
        app.kubernetes.io/component: autoscaler
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8085"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: cluster-autoscaler
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: cluster-autoscaler
        image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.28.2
        command:
        - ./cluster-autoscaler
        - --v=4
        - --stderrthreshold=info
        - --cloud-provider=aws
        - --skip-nodes-with-local-storage=false
        - --expander=least-waste
        - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/$(CLUSTER_NAME)
        - --balance-similar-node-groups
        - --skip-nodes-with-system-pods=false
        ports:
        - name: http
          containerPort: 8085
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health-check
            port: http
          initialDelaySeconds: 600
          periodSeconds: 300
          timeoutSeconds: 30
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health-check
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 30
          failureThreshold: 3
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
          limits:
            cpu: 100m
            memory: 300Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        env:
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: cluster-autoscaler-config
              key: AWS_REGION
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cluster-autoscaler-config
              key: CLUSTER_NAME
        volumeMounts:
        - name: tmp
          mountPath: /tmp
          readOnly: false
      volumes:
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - effect: NoSchedule
        key: node.kubernetes.io/not-ready
        operator: Exists
      - effect: NoSchedule
        key: node.kubernetes.io/unreachable
        operator: Exists
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: karpenter.sh/provisioner-name
                operator: DoesNotExist
              - key: eks.amazonaws.com/nodegroup
                operator: Exists