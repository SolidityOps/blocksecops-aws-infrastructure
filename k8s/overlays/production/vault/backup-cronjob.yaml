apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-backup
spec:
  schedule: "0 3 * * *"  # Daily at 3 AM
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: vault-backup
            app.kubernetes.io/component: backup
        spec:
          restartPolicy: OnFailure
          serviceAccountName: vault-backup
          containers:
          - name: vault-backup
            image: alpine:3.18
            command:
            - /bin/sh
            - -c
            - |
              # File storage backend backup - copy Vault data directory
              BACKUP_DIR="/backup/vault-backup-$(date +%Y%m%d-%H%M%S)"
              echo "Creating file storage backup: $BACKUP_DIR"

              # Create backup directory
              mkdir -p "$BACKUP_DIR"

              # Stop Vault gracefully before backup (optional for consistency)
              # Note: This approach copies files while Vault is running
              # For production, consider stopping Vault temporarily for consistent backups

              # Copy Vault data directory
              if cp -r /vault-data/* "$BACKUP_DIR/" 2>/dev/null; then
                echo "Vault data files copied successfully"

                # Create metadata file
                cat > "$BACKUP_DIR/backup-metadata.txt" << EOF
              Backup Date: $(date)
              Backup Type: File Storage Backend
              Source: /vault-data
              Notes: File-based backup of Vault data directory
              EOF

                # Compress the backup
                tar -czf "$BACKUP_DIR.tar.gz" -C /backup "$(basename "$BACKUP_DIR")"
                rm -rf "$BACKUP_DIR"

                echo "Backup compressed to $BACKUP_DIR.tar.gz"

                # Keep only last 7 days of backups
                find /backup -name "vault-backup-*.tar.gz" -mtime +7 -delete
                echo "Backup retention cleanup completed"
              else
                echo "Backup failed - no data to backup or copy failed"
                # Don't exit with error if directory is empty (first run)
                echo "This might be the first backup or Vault data directory is empty"
              fi
# No environment variables needed for file-based backup
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            - name: vault-data
              mountPath: /vault-data
              readOnly: true
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: vault-backup-pvc
          - name: vault-data
            persistentVolumeClaim:
              claimName: vault-data-vault-0  # StatefulSet PVC naming pattern

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-backup-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-backup

# Note: No secrets needed for file-based backup
# The backup job directly accesses the Vault data directory via PVC